# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kEK8VhCkPGVkrUBrrhXf2L6587aPY8wE

## **Building a system that can predict whether a person has diabetes or not with the help of Machine Learning**
"""

import numpy as np
import pandas as pd

diabetes_dataset = pd.read_csv('diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.size

diabetes_dataset.describe()

diabetes_dataset.info()

diabetes_dataset.isnull().sum()

diabetes_dataset.groupby('Outcome').mean()

diabetes_dataset['Outcome'].value_counts()

import seaborn as sns
sns.countplot(x='Outcome',data=diabetes_dataset,palette='inferno')

sns.countplot(x='Outcome',hue='Pregnancies',data=diabetes_dataset,palette='rainbow')

sns.scatterplot(x='Age',y='Glucose',data=diabetes_dataset,hue='Outcome',palette='inferno')

sns.scatterplot(x='Age',y='BloodPressure',data=diabetes_dataset,hue='Outcome',palette='inferno')

X = diabetes_dataset.drop(columns='Outcome',axis=1)
Y = diabetes_dataset['Outcome']

X

Y

"""We can see there are some inconsistent values in the input data which need to be modified to a suitable range that will become easy and accurate for the machine learning model"""

#from sklearn.preprocessing import StandardScaler
#scaler = StandardScaler()
#scaler.fit(X)

#standardaized_data = scaler.transform(X)

#standardaized_data

#X = standardaized_data

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

X.shape,X_train.shape,X_test.shape

#Logistic Regression
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train,Y_train)
model.score(X_train,Y_train)

model.score(X_test,Y_test)

#Random Forest
from sklearn.ensemble import RandomForestClassifier
model1 = RandomForestClassifier()
model1.fit(X_train,Y_train)
model1.score(X_train,Y_train)

model1.score(X_test,Y_test)

#Knn
from sklearn.neighbors import KNeighborsClassifier
model2 = KNeighborsClassifier()
model2.fit(X_train,Y_train)
model2.score(X_train,Y_train)

model2.score(X_test,Y_test)

"""Here from the above classification algorithms we can come to a conclude that SVM performs better without any over fitting and under fitting.

---
                                 Training                   Testing                   

Logistic Regression  -----   0.7850162866449512 ----- 0.7532467532467533 ❌\
Random Forest------------   1.0    -------------------------------------   0.7597402597402597 ❌\
kNN------------------------------   0.7980456026058632   ------    0.7272727272727273 ❌\
SVM ----------------------------   0.7833876221498371  -------     0.7727272727272727 ✅
"""

from sklearn import svm
classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

#for training data
from sklearn.metrics import accuracy_score
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

training_data_accuracy

#for testing data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)

testing_data_accuracy

"""Now we can make a system for this overall scenario"""

#first we take input data the changing to numpy array which works efficiently then reshaping because we dont give the outcome value as input
#and then we standardise the input values
input_data = (0,137,40,35,168,43.1,2.288,33)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
#std_data = scaler.transform(input_data_reshaped)
prediction = classifier.predict(input_data_reshaped)
print(prediction)
if (prediction[0] == 0):
    print('The person is not diabetic')
else:
    print('The person is diabetic')

"""Deploying the model"""

import pickle
filename = 'trained_model.sav'
pickle.dump(classifier,open(filename,'wb'))

loaded_model = pickle.load(open('trained_model.sav','rb'))

input_data = (0,137,40,35,168,43.1,2.288,33)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = loaded_model.predict(input_data_reshaped)
print(prediction)
if (prediction[0] == 0):
    print('The person is not diabetic')
else:
    print('The person is diabetic')

